generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  warAdm
  superAdm
}

enum ProductGender {
  MEN
  WOMEN
  UNISEX
}

enum ProductTypes {
  TOPS
  BOTTOMS
  ACCESSORIES
}

enum ProductSize {
  S
  M
  L
  XL
  ONESIZE
}

enum MutationTypes {
  TRANSFER
  RESTOCK
  REMOVE
  TRANSACTION
  INBOUND
}

enum PaymentMethod {
  MANUAL
  GATEWAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  CART
  PENDING_PAYMENT
  WAITING_CONFIRMATION
  PROCESSED
  SHIPPED
  COMPLETED
  CANCELLED
}

// FEATURE 1
model User {
  id            String        @id
  accountActive Boolean       @default(false)
  username      String?       @unique
  email         String        @unique
  password      String?
  gender        Gender?
  dob           DateTime?
  createdAt     DateTime      @default(now())
  addresses     AddressList[]
  orders        Order[]
}

model AddressList {
  id          String  @id
  address     String
  coordinate  String
  userId      String
  mainAddress Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
}

model Admin {
  id            String     @id
  role          Role       @default(warAdm)
  accountActive Boolean    @default(false)
  fullName      String?
  email         String     @unique
  password      String?
  dob           DateTime?
  createdAt     DateTime   @default(now())
  Warehouse     Warehouse?
}

model Warehouse {
  id            String             @id
  warehouseName String
  city          String
  coordinate    String
  address       String
  createdAt     DateTime           @default(now())
  adminID       String             @unique
  admin         Admin              @relation(fields: [adminID], references: [id])
  products      WarehouseProduct[]
  mutations     StockMutation[]
}

model WarehouseProduct {
  id               String          @id
  warehouseID      String
  productVariantID String
  size             ProductSize
  stock            Int
  warehouse        Warehouse       @relation(fields: [warehouseID], references: [id])
  productVariant   ProductVariant  @relation(fields: [productVariantID], references: [id])
  StockMutation    StockMutation[]
}

// FEATURE 2
model Product {
  id           String           @id
  name         String           @unique
  slug         String           @unique
  description  String
  price        Int
  oneSize      Boolean          @default(false)
  categoryID   String
  thumbnailURL String?
  createdAt    DateTime         @default(now())
  images       ProductImage[]
  variants     ProductVariant[]
  category     ProductCategory  @relation(fields: [categoryID], references: [id])
}

model ProductCategory {
  id       String        @id
  gender   ProductGender
  type     ProductTypes
  category String
  products Product[]
}

model ProductImage {
  id        String    @id
  productID String
  image     String    @unique
  product   Product   @relation(fields: [productID], references: [id])
}

model ProductVariant {
  id               String             @id
  productID        String
  color            String
  HEX              String
  image            String             @unique
  product          Product            @relation(fields: [productID], references: [id])
  warehouseProduct WarehouseProduct[]
  orderItems       OrderItem[]
}

model StockMutation {
  id                    String           @id
  warehouseID           String
  associatedWarehouseId String?
  type                  MutationTypes
  warehouseProductID    String
  size                  ProductSize
  quantity              Int
  createdAt             DateTime         @default(now())
  warehouse             Warehouse        @relation(fields: [warehouseID], references: [id])
  warehouseProduct      WarehouseProduct @relation(fields: [warehouseProductID], references: [id])
}

// FEATURE 3

model Order {
  id            String        @id
  userId        String
  status        OrderStatus   @default(CART)
  paymentProof  String?
  warehouseId   String?
  totalAmount   Int            @default(0)
  paymentMethod PaymentMethod?
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id               String         @id
  orderId          String         
  productVariantId String
  warehouseId      String?
  quantity         Int
  price            Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  order            Order          @relation(fields: [orderId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}
